[{"body":"","categories":"","description":"","excerpt":"","ref":"/8/games/","tags":"","title":"Game Design"},{"body":"from Khan Academy\nAn algorithm is a mindless, step by step process that describes how to solve a problem in a way that always gives a correct answer. When there are multiple algorithms for a particular problem (and there often are!), the best algorithm is typically the one that solves it the fastest.\nAs computer programmers, we are constantly using algorithms, whether it‚Äôs an existing algorithm for a common problem, like sorting an array, or if it‚Äôs a completely new algorithm unique to our program. By understanding algorithms, we can make better decisions about which existing algorithms to use and learn how to make new algorithms that are correct and efficient.\nAn algorithm is made up of three basic building blocks: sequencing, selection, and iteration.\nSequencing An algorithm is a step-by-step process, and the order of those steps are crucial to ensuring the correctness of an algorithm.\nHere‚Äôs an algorithm for translating a word into Pig Latin, like from ‚Äúpig‚Äù to ‚Äúig-pay‚Äù:\n1. Append \"-\". 2. Append first letter 3. Append \"ay\" 4. Remove first letter Note: append means to add to the end of something. üîç Try following those steps in different orders and see what comes out. Not the same, is it?\nSelection Algorithms can use selection to determine a different set of steps to execute based on a Boolean expression.\nHere‚Äôs an improved algorithm for Pig Latin that handles words that starts with vowels, so that ‚Äúeggs‚Äù becomes ‚Äúeggs-yay‚Äù instead of the unpronounceable ‚Äúggs-eay‚Äù:\n1. Append \"-\" 2. If first letter is vowel, then: a. Append \"yay\" 3. Otherwise: a. Append first letter b. Append \"ay\" c. Remove first letter Iteration Algorithms often use repetition to execute steps a certain number of times or until a certain condition is met.\nWe can add iteration to the previous algorithm to translate a complete phrase, so that ‚Äúpeanut butter and jelly‚Äù becomes ‚Äúeanut-pay utter-bay and-yay elly-jay‚Äù:\n1. Store list of words 2. For each word in words: a. Append hyphen b. If first letter is vowel, then: i. Append \"yay\" c. Otherwise: i. Append first letter ii. Append \"ay\" iii. Remove first letter By combining sequencing, selection, and iteration, we‚Äôve successfully come up with an algorithm for Pig Latin translation.\nü§î Can you think of situations where it produces an incorrect output?\n","categories":"","description":"","excerpt":"from Khan Academy\nAn algorithm is a mindless, step by step process ‚Ä¶","ref":"/8/vehicles/programming/constructs/","tags":"","title":"Constructs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/vehicles/gettingstarted/","tags":"","title":"Getting Started"},{"body":"To control the LEGO Mindstorms robots running ev3dev, you will need to:\nOpen the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Install the EV3 MicroPython extension ","categories":"","description":"","excerpt":"To control the LEGO Mindstorms robots running ev3dev, you will need ‚Ä¶","ref":"/8/vehicles/gettingstarted/installation/","tags":"","title":"Installing software"},{"body":"adapted from PyBricks\nHaving to control the two motors independently to move our vehicle would involve figuring out a lot of maths ourselves, which would be annoying, time-consuming and error-prone.\nInstead, we can use the DriveBase class to make driving our robot around a lot simpler.\nEV3-compatible motors. Arrows indicate the default positive direction. Import We also need to import the code for the Motor.\nfrom pybricks.ev3devices import Motor from pybricks.robotics import DriveBase Setup We also need to initialize the motors:\n# Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) By specifying the dimensions of your robot, this class makes it easy to drive a given distance in millimeters or turn by a given number of degrees.\nPositive distances, radii, or drive speeds mean driving forward. Negative means backward.\nPositive angles and turn rates mean turning right. Negative means left. So when viewed from the top, positive means clockwise and negative means counterclockwise.\nParameters:\nleft_motor, the motor that drives the left wheel. right_motor, the motor that drives the right wheel. wheel_diameter, diameter of the wheels in millimetres (mm). axle_track, distance between the points where the left and right wheels touch the ground, in millimetres (mm). Functions Driving in the foreground The following functions operate in the foreground, meaning that the robot will drive a given distance, or turn by a given angle, then stop, and then move on to the next instruction. The distance/angle travelled is measured using the rotation sensors in the motor units. Because wheels may slip while moving, the travelled distance and angle are only estimates.\nstraight(distance) Drives straight for a given distance and then stops.\nParameters:\ndistance, distance to travel in millimetres (mm). turn(angle) Turns in place by a given angle and then stops.\nParameters:\nangle, angle to turn in degrees (¬∞). curve(radius, angle) Drives an arc along a circle of a given radius, by a given angle.\nParameters: radius (dimension: mm) ‚Äì Radius of the circle. angle (angle: deg) ‚Äì Angle along the circle.\nDriving in the background If you want the robot to do things while it is driving (for example, check on the values of sensors), you need to use the drive() function. Unlike the ones above, this will start the wheels turning, and then immediately move on to the next instruction, while the wheels remain turning. They will keep travelling in the same way unless another movement instruction or a stop() instruction is given.\ndrive(drive_speed, turn_rate) Starts driving at the specified speed and turn rate. Both values are measured at the center point between the wheels of the robot. It keeps going until you use stop() or change course by using drive() again. For example, you can drive until a sensor is triggered and then stop or turn around.\nParameters:\ndrive_speed, speed of the robot in millimetres per second (mm/s). turn_rate, turn rate of the robot in degrees per second (¬∞/s). stop() Stops the robot by letting the motors spin freely.\nExample # Go forward and backwards for one metre. robot.straight(1000) robot.straight(-1000) # Turn clockwise by 360 degrees and back again. robot.turn(360) robot.turn(-360) ","categories":"","description":"","excerpt":"adapted from PyBricks\nHaving to control the two motors independently ‚Ä¶","ref":"/8/vehicles/inputsoutputs/drive/","tags":"","title":"DriveBase"},{"body":"Flowcharts are a visual representation of an algorithm. A flowchart normally uses a combination of blocks and arrows to represent actions and sequences. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.\nSequencing 1. Append \"-\". 2. Append first letter 3. Append \"ay\" 4. Remove first letter Selection 1. Append \"-\" 2. If first letter is vowel, then: a. Append \"yay\" 3. Otherwise: a. Append first letter b. Append \"ay\" c. Remove first letter Iteration 1. Store list of words 2. For each word in words: a. Append hyphen b. If first letter is vowel, then: i. Append \"yay\" c. Otherwise: i. Append first letter ii. Append \"ay\" iii. Remove first letter ","categories":"","description":"","excerpt":"Flowcharts are a visual representation of an algorithm. A flowchart ‚Ä¶","ref":"/8/vehicles/programming/flowcharts/","tags":"","title":"Flowcharts"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/vehicles/inputsoutputs/","tags":"","title":"Inputs and Outputs"},{"body":"Taken from pybricks.com\nAn EV3 brick Turning the EV3 Brick on and off Turn on the EV3 Brick by pressing the dark gray center button.\nThe boot process may take several minutes. While booting, the EV3 Brick status light turns orange and blinks intermittently, and you‚Äôll see a lot of text on the EV3 screen. The EV3 Brick is ready for use when the status light turns green.\nTo turn the EV3 Brick off, open the shutdown menu with the back button, and then select Power Off using the center button, as shown in Figure 5.\nFigure 5: Turning the EV3 Brick off Viewing motor and sensor values When you‚Äôre not running a program, you can view motor and sensor values using the device browser, as shown in Figure 6.\nFigure 6: Viewing motor and sensor values Running a program without a computer You can run previously downloaded programs directly from the EV3 Brick.\nTo do so, find the program using the file browser on the EV3 screen and press the center button key to start the program as shown in Figure 7.\nFigure 7: Starting a program using the buttons on the EV3 Brick ","categories":"","description":"","excerpt":"Taken from pybricks.com\nAn EV3 brick Turning the EV3 Brick on and off ‚Ä¶","ref":"/8/vehicles/gettingstarted/usingev3/","tags":"","title":"Using the EV3 brick"},{"body":"Taken from pybricks.com\nProject structure Now that you‚Äôve set up your computer and EV3 Brick, you‚Äôre ready to start writing programs.\nTo make it easier to create and manage your programs, let‚Äôs first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.\nPrograms are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.py) and other optional scripts or files. This project folder and all of its contents will be copied to the EV3 Brick, where the main program will be run.\nThis page shows you how to create such a project and how to transfer it to the EV3 Brick.\nFigure 8: A project contains a program called main.py and optional resources like sounds or MicroPython modules. Creating a new project To create a new project, open the EV3 MicroPython tab and click create a new project, as shown in Figure 9. Enter a project name in the text field that appears and press Enter. When prompted, choose a location for this program and confirm by clicking choose folder.\nFigure 9: Creating a new project. This example is called getting_started, but you can choose any name. When you create a new project, it already includes a file called main.py. To see its contents and to modify it, open it from the file browser as shown in Figure 10. This is where you‚Äôll write your programs.\nIf you are new to MicroPython programming, we recommend that you keep the existing code in place and add your code to it.\nFigure 10: Opening the default main.py program. Opening an existing project To open a project you created previously, click File and click Open Folder, as shown in Figure 11. Next, navigate to your previously created project folder and click OK. You can also open your recently used projects using the Open Recent menu option.\nFigure 11: Opening a previously created project. Connecting to the EV3 Brick with Visual Studio Code To be able to transfer your code to the EV3 Brick, you‚Äôll first need to connect the EV3 Brick to your computer with the mini-USB cable and configure the connection with Visual Studio Code. To do so:\nTurn the EV3 Brick on Connect the EV3 Brick to your computer with the mini-USB cable Configure the USB connection as shown in Figure 12. Figure 12: Configuring the USB connection between the computer and the EV3 Brick Downloading and running a program You can press the F5 key to run the program. Alternatively, you can start it manually by going to the debug tab and clicking the green start arrow, as shown in Figure 13.\nWhen the program starts, a pop-up toolbar allows you to stop the program if necessary. You can also stop the program at any time using the back button on the EV3 Brick.\nIf your program produces any output with the print command, this is shown in the output window.\nFigure 13: Running a program Expanding the example program Now that you‚Äôve run the basic code template, you can expand the program to make a motor move. First, attach a Large Motor to Port B on the EV3 Brick, as shown in Figure 14.\nFigure 14: The EV3 Brick with a Large Motor attached to port B. Next, edit main.py to make it look like this:\n#!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port # Create your objects here # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize a motor at port B. test_motor = Motor(Port.B) # Write your program here # Play a sound. ev3.speaker.beep() # Run the motor up to 500 degrees per second. To a target angle of 90 degrees. test_motor.run_target(500, 90) # Play another beep sound. ev3.speaker.beep(frequency=1000, duration=500) This program makes your robot beep, rotate the motor, and beep again with a higher pitched tone. Run the program to make sure that it works as expected.\nManaging files on the EV3 Brick After you‚Äôve downloaded a project to the EV3 Brick, you can run, delete, or back up programs stored on it using the device browser as shown in Figure 15.\nFigure 15: Using the EV3 device browser to manage files on your EV3 Brick ","categories":"","description":"","excerpt":"Taken from pybricks.com\nProject structure Now that you‚Äôve set up your ‚Ä¶","ref":"/8/vehicles/gettingstarted/creatingprograms/","tags":"","title":"Creating and running programs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/vehicles/programming/","tags":"","title":"Programming"},{"body":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect data about its surroundings. The Touch Sensor detects when its red button has been pressed or released.\nAn EV3 touch sensor Import from pybricks.ev3devices import TouchSensor Setup # Initialize Touch Sensor touch_sensor = TouchSensor(Port.S1) Functions pressed() Checks if the sensor is pressed.\nReturns:\nTrue if the sensor is pressed, False if it is not pressed. Example # Beep when touch sensor is pressed while True: if button.pressed(): ev3.speaker.beep() # Drive forward until touch sensor is pressed robot.drive(1000, 0) while not touch_sensor.pressed(): pass robot.stop() ","categories":"","description":"","excerpt":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect ‚Ä¶","ref":"/8/vehicles/inputsoutputs/touch/","tags":"","title":"Touch sensor"},{"body":"Overview The basic structure of any EV3 program is:\nthe shebang line the docstring import libraries setup program body (the part where you tell the robot what to do) Shebang #! The shebang line is a piece of Unix trickery from about 1980 which has stuck around because it is rather useful. You don‚Äôt need to understand what it is doing or why it is there, but it is vitally important (in big letters) that this line appears exactly as it does below, and that it is at the very start of the program file (no blank lines above it, or spaces in front of it).\n#!/usr/bin/env pybricks-micropython If your program doesn‚Äôt work, check this first!\nDocstring The next lines, within the \"\"\" (three double-quote marks), are explanatory text about what the program in this file does. It is customary to do this in Python for the benefit of anyone else who might come across your code (including you in the future), but your program will work if you don‚Äôt.\n\"\"\" Example LEGO¬Æ MINDSTORMS¬Æ EV3 Robot Educator Driving Base Program ----------------------------------------------------------------- This program requires LEGO¬Æ EV3 MicroPython v2.0. Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3 Building instructions can be found at: https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot \"\"\" Importing see import for more detail\nAny but the simplest of programs will use code from one or more modules. A module is chunk of code that does some useful stuff that lots of different developers would want to do again and again: do maths, search for and sort data, connect to and work with databases, use various bits of hardware (like an EV3 brick!). There is a standard library included with Python, where the most common modules can be found, and you can download and use other modules when you need to.\nfrom pybricks.hubs import EV3Brick from pybricks.parameters import Port, Stop from pybricks.robotics import DriveBase from pybricks.tools import wait from pybricks.ev3devices import Motor, TouchSensor, ColorSensor In the code above, you can get the sense that pybricks is a very large library with lots of different parts. One of those parts is called parameters, and on the highlighted line we tell the computer we will need two things from the parameter part of the pybricks module: the things called Port and Stop. The dot notation is how you show things that are parts of other things:\npybricks.parameters means the parameters part of pybricks; pybricks.parameters.Stop means the Stop part of the parameters part of pybricks. Setup Now that we have all the bits of code we will need, we need to tell the computer about the things we‚Äôll be using and where they‚Äôre connected.\nWe need to set up:\nthe EV3 brick itself, the motors the DriveBase, if it‚Äôs a vehicle, the sensors that we are using, making sure that the ports you list in this part of the code match up with where you‚Äôve actually connected each of the components. Since we are making a vehicle that drives, rather than, say, a stationary factory robot on an assembly line, we set up the motors for our wheels using a DriveBase, which has a lot of handy driving-around kind of functions.\n# Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) # Initialize the Touch Sensor. touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor. color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor. ultrasonic_sensor = UltrasonicSensor(Port.S4) ","categories":"","description":"","excerpt":"Overview The basic structure of any EV3 program is:\nthe shebang line ‚Ä¶","ref":"/8/vehicles/gettingstarted/programstructure/","tags":"","title":"Structure of program"},{"body":"adapted from PyBricks\nThe Ultrasonic Sensor is a digital sensor that can measure the distance to an object in front of it. It does this by sending out high frequency sound waves and measuring how long it takes the sound to reflect back to the sensor. The sound frequency is too high for you to hear.\nDistance to an object is measured in millimeters (mm). This allows you to program your robot to stop at a certain distance from a wall.\nAn EV3 ultrasonic sensor Import from pybricks.ev3devices import UltrasonicSensor Setup # Initialize the Ultrasonic Sensor. obstacle_sensor = UltrasonicSensor(Port.S4) Functions distance()distance(silent) Measures the distance between the sensor and an object using ultrasonic sound waves.\nParameters:\nsilent (bool): False by default. Choose True to turn the sensor off after measuring the distance. This reduces interference with other ultrasonic sensors. If you do this too frequently, the sensor can freeze. If this happens, unplug it and plug it back in. Returns:\ndistance in mm presence() Checks for the presence of other ultrasonic sensors by detecting ultrasonic sounds.\nIf the other ultrasonic sensor is operating in silent mode, you can only detect the presence of that sensor while it is taking a measurement.\nReturns:\nTrue if ultrasonic sounds are detected, False if not. Example # Drive forward until an object is no more than 30cm away robot.drive(200, 0) while obstacle_sensor.distance() \u003e 300: pass robot.stop() ","categories":"","description":"","excerpt":"adapted from PyBricks\nThe Ultrasonic Sensor is a digital sensor that ‚Ä¶","ref":"/8/vehicles/inputsoutputs/ultrasonic/","tags":"","title":"Ultrasonic sensor"},{"body":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect data about is surroundings. The Color Sensor can detect color and reflected light.\nColor vs colour In almost all programming, American spellings are used. So as programmers we use color and colors, even though we would normally spell the words colour and colours. An EV3 color sensor Import from pybricks.ev3devices import ColorSensor Setup # Initialize the sensors. line_sensor = ColorSensor(Port.S1) Functions reflection() Measures the reflection of a surface using a red light.\nReturns:\nreflection, ranging from 0 (no reflection) to 100 (high reflection). rgb() Measures the reflection of a surface using a red, green, and then a blue light.\nReturns:\ntuple of reflections for red, green, and blue light, each ranging from 0.0 (no reflection) to 100.0 (high reflection). (r, g, b) color() Measures the color of a surface.\nReturns:\nColor.BLACK, Color.BLUE, Color.GREEN, Color.YELLOW, Color.RED, Color.WHITE, Color.BROWN, or None if no color is detected. ambient() Measures the ambient light intensity.\nReturns:\nambient light intensity, ranging from 0 (dark) to 100 (bright). Example # Go forward while reflected light is less than 10. ev3.speaker.beep() robot.drive(100,0) while line_sensor.reflection() \u003c 10: wait(10) robot.stop() ","categories":"","description":"","excerpt":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect ‚Ä¶","ref":"/8/vehicles/inputsoutputs/color/","tags":"","title":"Color sensor"},{"body":"Comments are a way of leaving messages for other humans (or you in the future) in your program. They are a vital part of programming, and critical to writing good code that works.\nComments are indicated using some combination of symbols, and the computer is programmed to ignore them, so you can write anything you like, and not have to worry about the computer trying to make sense of it. Because the computer ignores any text that is a comment, we can also use comments to ‚Äúturn off‚Äù some lines of our program temporarily by ‚Äúcommenting them out‚Äù.\nIn Python, any time the computer comes across a # (hash) symbol, it will ignore the rest of the line. Most text editors have a way to automatically add and remove comments from a selection of code. In Visual Studio Code, the shortcut for toggling comment markers is Ctrl+/ (Cmd+/ on a Mac).\n# This is a comment Why do we need comments? Because computers are brainless machines with no clue about anything, computer programs are extremely thorough, step-by-step sequences of instructions that tell the computer exactly what to do. They don‚Äôt, however, provide any clue about what the program is for, why you might want to use it, or why certain bits of code are included.\nComments allow a human reader to get a ‚Äúbig picture‚Äù sense of what chunks of the program, and the program as a whole, are about, and why certain decisions have been made. They are also used to leave reminders about things that still need to be fixed, things which might cause trouble later, and places where a problem has been found but a solution hasn‚Äôt been worked out yet.\n","categories":"","description":"","excerpt":"Comments are a way of leaving messages for other humans (or you in the ‚Ä¶","ref":"/8/vehicles/gettingstarted/comments/","tags":"","title":"Comments"},{"body":"This is a simple example which:\nbeeps, moves forward 100mm (10cm), moves backward 100mm, turns 360¬∞ on the spot, beeps again. Each of these steps happens to correspond with a line of code:\nev3.speaker.beep() robot.straight(100) robot.straight(-100) robot.turn(360) ev3.speaker.beep() Complete program Here is the complete program, complete with headings marking the major parts of the program structure. You can see on lines 44, 47, and 50 there are lines of code that are commented out because we don‚Äôt need them, but they might be handy in the future!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #!/usr/bin/env pybricks-micropython # ^ Shebang line above ^ ############################################## # Docstring ############################################## \"\"\" Example LEGO¬Æ MINDSTORMS¬Æ EV3 Robot Educator Driving Base Program ----------------------------------------------------------------- This program requires LEGO¬Æ EV3 MicroPython v2.0. Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3 Building instructions can be found at: https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot \"\"\" ############################################## # Import code ############################################## from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port from pybricks.robotics import DriveBase from pybricks.tools import wait ############################################## # Setup ############################################## # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) # Initialize the Touch Sensor. # touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor. # color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor. # ultrasonic_sensor = UltrasonicSensor(Port.S4) ############################################## # Program body ############################################## ev3.speaker.beep() robot.straight(100) robot.straight(-100) robot.turn(360) ev3.speaker.beep() ","categories":"","description":"","excerpt":"This is a simple example which:\nbeeps, moves forward 100mm (10cm), ‚Ä¶","ref":"/8/vehicles/gettingstarted/asimpleexample/","tags":"","title":"A starting example"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/glossary/","tags":"","title":"Glossary"},{"body":"Here are some things to try if your program won‚Äôt run on the EV3.\nCheck that the shebang line hasn‚Äôt been mangled. It is easy to add a space to the left or a line above, and that will break it. Make sure all the plugs are properly seated in their sockets by pushing them in a little bit. If you hear a click, that one wasn‚Äôt in properly, but should be now! Check that the sensors and motors that you‚Äôve declared in your program are actually plugged in to the ports you have said they are. If not, you can either rewire them so they match the program, or change the program to match the wiring. Plug the robot back into the computer and reconnect it. Use the debugging mode: Run \u003e Start Debugging, and there should be a helpful message at the bottom of the window about what is confusing the computer. ","categories":"","description":"","excerpt":"Here are some things to try if your program won‚Äôt run on the EV3. ‚Ä¶","ref":"/8/vehicles/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":" LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial ","categories":"","description":"","excerpt":" LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial ","ref":"/8/vehicles/reference/","tags":"","title":"Reference"},{"body":"In teams of two, design algorithms using flowcharts to create an automated, driverless vehicle that can:\nstop at a line, follow a line, and travel between two lines. Explore how an automated vehicle might be guided along a road or track and how line detection could be used to save lives. Design ways to improve driving safety by helping to prevent drivers from falling asleep and causing an accident.\nTask Description You will need to complete all the following sections as part of your collaborative presentation:\nDrive and stop at a line Design a flowchart for the automated vehicle to stop at a line. Working code with comments Validation video Following a line Design a flowchart for the automated, driverless vehicle to follow a line. Working code with comments Validation video Explain how an automated vehicle might be guided along a road or track. Once the wheeled robot is following the line, can it be improved to behave more like a car (i.e., move in a straight line rather than a wiggle)? Detecting lane changes To simulate what could happen if a driver falls asleep while driving, your robot could sound an alarm signal when it crosses the line. Program your robot to perform this function. Add you working code with comments. What can happen if a driver falls asleep while driving? How can we detect when a driver is falling asleep? How could you improve your program? Extension Simulate a vehicle‚Äôs behaviour at traffic lights by having their wheeled robot respond to a series of green and red signals. Placing the code inside a loop allows for the possibility of multiple ‚Äútraffic lights‚Äù along a track. Use the technic beams available in the EV3 core set to simulate green and red lights. Place the beams on the table so the Color Sensor can detect them while rolling over them. To Be Successful Appropriate protocols when taking a photos/videos of others. Acknowledge sources appropriately including graphics Plan and implement consistent and logical navigation Include hyperlinks to navigate the presentation Reference sources appropriately Complete at least all items of first 3 parts of this task. Learning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in Python coding challenges with persistence and learns from their mistakes and willingly completes the extension activities. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project ","categories":"","description":"","excerpt":"In teams of two, design algorithms using flowcharts to create an ‚Ä¶","ref":"/8/assessment/vehicles/1-follow/","tags":"","title":"1: Follow the line"},{"body":"In teams of two, you will design algorithms using flowcharts to create an automated, driverless vehicle that can navigate an obstacle course. You will then adapt your code to use a touch sensor and an ultrasonic sensor to complete the same course, and make comparisons between the solutions.\nThis challenge features a sequence of turns that the robot must perform in order to get to the ‚Äúend‚Äù of the course. The robot must begin at the starting point and get to the goal area by completing turning and forward movement behaviours. The robot must not cross any lines.\nTask description You will need to complete all the following sections as part of your collaborative presentation:\n1. Traverse course Traverse the course without using any sensors.\nDesign a flowchart for the automated, driverless vehicle to reach the goal. Working code with comments. Validation video. 2. Wall detection with touch sensor Use a touch sensor to detect the boundaries (walls) of the course while moving.\nDesign a flowchart for the automated, driverless vehicle to reach the goal using a touch sensor. Working code with comments. Validation video. 3. Wall detection with ultrasonic sensor Use an ultrasonic sensor to detect the boundaries (walls) of the course while moving.\nDesign a flowchart for the automated, driverless vehicle to reach the goal using an ultrasonic sensor. Working code with comments. Validation video. 4. Connection to our world Discuss the following questions:\nWhat differences were there between the touch and ultrasonic sensors in relation to your code and the driverless vehicle? Explain. How do modern vehicles use these two sensors? To Be Successful Use appropriate protocols when taking photos/videos of others. Acknowledge sources appropriately including source of graphics. Plan and implement consistent and logical navigation. Include hyperlinks to navigate the presentation. Reference sources appropriately. Complete all 3 sections of this task including questions. Work collaboratively with your partner. Learning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in Python coding challenges with persistence and learns from their mistakes and willingly completes the extension activities. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project ","categories":"","description":"","excerpt":"In teams of two, you will design algorithms using flowcharts to create ‚Ä¶","ref":"/8/assessment/vehicles/2-obstacle/","tags":"","title":"2: Obstacle course"},{"body":"In teams of two, your task is to design and program an autonomous robot that can explore and navigate its way around a room by avoiding walls and other obstacles before running into them. Your robot must have the capacity to carry a small camera or mobile phone.\nTo Be Successful Your team must complete a working robot and documentation that includes:\nDefining Collaborating and managing Designing Implementing Evaluating Include comments with your all Python code. Use appropriate programming structures (selection and iteration). In detail, you must each complete the documentation in your OneNote.\nPurpose Students apply their coding skills and iterative project techniques to collaboratively identify, deconstruct, design and create an autonomous robot that uses sensors to explore a room.\nLearning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in Python coding challenges with persistence and learns from their mistakes and willingly completes the extension activities. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project ","categories":"","description":"","excerpt":"In teams of two, your task is to design and program an autonomous ‚Ä¶","ref":"/8/assessment/vehicles/3-explorer/","tags":"","title":"3: Robotics explorer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/4-animalquiz/","tags":"","title":"4: Animal quiz"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/5-checkpoint/","tags":"","title":"5: Game checkpoint"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/6-project/","tags":"","title":"6: Game project"},{"body":" Year 8 Digital Technologies at Thomas More College Assessment Autonomous Vehicles Game Design ","categories":"","description":"","excerpt":" Year 8 Digital Technologies at Thomas More College Assessment ‚Ä¶","ref":"/8/","tags":"","title":"8 Digital Tech"},{"body":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n","categories":"","description":"","excerpt":"When calling a function, the values given to it are called arguments. ‚Ä¶","ref":"/8/glossary/argument/","tags":"","title":"argument"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/","tags":"","title":"Assessment"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/vehicles/","tags":"","title":"Autonomous Vehicles"},{"body":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nColors are described by the amount of red, green, and blue light to emit, using numbers in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) The built-in RGB LED on your Gemma (a DotStar) has these three color components, so we set its color in this way.\nThe NeoPixel RGB LEDs you will solder onto your Gemma have four components: the usual red, green, and blue and also white. So you if you wanted the above color on your Neopixel LED strip, you would use:\n(0, 150, 255, 0) Unless you want to set a particular LED pixel to be white in color, it is recommended that you set the white value to zero (0), as the white tends to wash out the colors otherwise.\nYou can use the Google Color Picker to find different colors, and then copy the RGB value listed. Don‚Äôt forget to add a value for the white (probably zero) after the other three numbers, if you are setting NeoPixel colors.\n","categories":"","description":"","excerpt":"In almost all programming, American spellings are used. So as ‚Ä¶","ref":"/8/glossary/color/","tags":"","title":"color/colour"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/","tags":"","title":"Game Design"},{"body":"Importing is the process of adding functions or other objects from other modules to support your program.\nImagine we wish to use the randint() function to choose a random number between 1 and 6, as though we were throwing a single six-sided die. The randint() function is part of the random module. There are two ways we can go:\nimport the whole module import just the objects we need Import module import random num = random.randint(1,6) print(num) We can use a different name for the module in our program, which is useful if the original name is really long, or we happen to have two modules with the same name.\nimport random as ran num = ran.randint(1,6) print(num) Import just what we need By importing just the objects we need from a module, we don‚Äôt need to use the name of the module anymore.\nfrom random import randint num = randint(1,6) print(num) We can rename objects for convenience or to avoid name clashes.\nfrom random import randint as throwDie num = throwDie(1,6) print(num) ","categories":"","description":"","excerpt":"Importing is the process of adding functions or other objects from ‚Ä¶","ref":"/8/glossary/import/","tags":"","title":"import"},{"body":"A list is a data structure for storing a series of related pieces of information.\nDefining a list You can define a list using square brackets, with the elements separated by commas, like this:\nsquares = [0, 1, 4, 9, 16, 25, 36] vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] Selecting elements You can pick an element from the list like this: squares[0]. Note that counting begins at zero. Think of the number as ‚Äúhow far from the beginning‚Äù the element in the list is. So vowels[0] is the element at the start of the list, and vowels[3] is three elements further down the list. So the string \"u\" in that list would be vowels[4].\nAdding elements You can add elements to the end of a list with the append() function.\nsquares.append(49) print(squares[7]) # Output: 49 Removing elements You can remove elements from a list with remove() and pop().\nfriends = [\"Nhi\", \"David\", \"Hari\", \"Zahra\"] friends.remove(\"David\") print(friends) # Output: [\"Nhi, \"Hari\", \"Zahra\"] If there are multiple elements in the list with the same value, remove() will remove just the first one.\nfriends = [\"Nhi\", \"David\", \"Hari\", \"Zahra\"] exBestie = friends.pop(0) print(friends) # Output: [\"David\", \"Hari\", \"Zahra\"] print(exBestie) # Output: \"Nhi\" ","categories":"","description":"","excerpt":"A list is a data structure for storing a series of related pieces of ‚Ä¶","ref":"/8/glossary/list/","tags":"","title":"list"},{"body":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n","categories":"","description":"","excerpt":"When defining a function, the pieces of information that the function ‚Ä¶","ref":"/8/glossary/parameter/","tags":"","title":"parameter"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/teachers/","tags":"","title":"Teachers"},{"body":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but when programming Gemma we mostly use them for colors (red, green, blue, white).\n","categories":"","description":"","excerpt":"A tuple is a single unit of data made up of multiple values. In Python ‚Ä¶","ref":"/8/glossary/tuple/","tags":"","title":"tuple"},{"body":"Computers store all information as sequences of numbers, but different kinds of data are encoded in different ways. For example, whole numbers and decimal numbers are stored differently.\nSome common data types you‚Äôll encounter are:\nintegers (int) Integers are whole numbers, and can be positive or negative. floating point numbers (float and double) Floating point numbers (commonly called floats) are for storing decimal numbers. The number is stored in scientific notation, with a mantissa and exponent. $$ \\overbrace{3.18}^{\\text{mantissa}}\\times 10^{\\overbrace{-7}^{\\text{exponent}}} $$\nThere is a limited number of digits for the mantissa and the exponent. If you need more, a double precision floating point number (or double for short) has twice the space, so can store a more precise mantissa, and a larger exponent.\ncharacters (char) A character is a single letter, digit, punctuation mark, or piece of whitespace (a space, newline, tab, etc.). strings (string) Strings are so called because they are ‚Äòstrings of characters‚Äô. They are usually indicated with double quotes ‚Äúlike this‚Äù. In some languages, like Python, strings can be in single quotes as well, ‚Äôlike this‚Äô. ","categories":"","description":"","excerpt":"Computers store all information as sequences of numbers, but different ‚Ä¶","ref":"/8/glossary/type/","tags":"","title":"type"},{"body":"Full article\nUser stories are a way of describing the requirements of a project that focuses on the users, rather than the designers, of a system. User stories take the form:\nAs a ____, I want to ____ so that ____.\n","categories":"","description":"","excerpt":"Full article\nUser stories are a way of describing the requirements of ‚Ä¶","ref":"/8/teachers/userstories/","tags":"","title":"User stories"},{"body":"A variable is a named place to store a piece of information.\n","categories":"","description":"","excerpt":"A variable is a named place to store a piece of information.\n","ref":"/8/glossary/variable/","tags":"","title":"variable"},{"body":"We will be making autonomous vehicles using LEGO‚Äôs EV3 platform. An autonomous vehicle is one which has no intervention at all from a human while it is running.\n","categories":"","description":"","excerpt":"We will be making autonomous vehicles using LEGO‚Äôs EV3 platform. An ‚Ä¶","ref":"/8/vehicles/","tags":"","title":"Autonomous Vehicles"}]