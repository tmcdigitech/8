[{"body":"","categories":"","description":"","excerpt":"","ref":"/8/games/","tags":"","title":"Game Design"},{"body":"from Khan Academy\nAn algorithm is a mindless, step by step process that describes how to solve a problem in a way that always gives a correct answer. When there are multiple algorithms for a particular problem (and there often are!), the best algorithm is typically the one that solves it the fastest.\nAs computer programmers, we are constantly using algorithms, whether it‚Äôs an existing algorithm for a common problem, like sorting an array, or if it‚Äôs a completely new algorithm unique to our program. By understanding algorithms, we can make better decisions about which existing algorithms to use and learn how to make new algorithms that are correct and efficient.\nAn algorithm is made up of three basic building blocks: sequencing, selection, and iteration.\nSequencing An algorithm is a step-by-step process, and the order of those steps are crucial to ensuring the correctness of an algorithm.\nHere‚Äôs an algorithm for translating a word into Pig Latin, like from ‚Äúpig‚Äù to ‚Äúig-pay‚Äù:\n1. Append \"-\". 2. Append first letter 3. Append \"ay\" 4. Remove first letter Note: append means to add to the end of something. üîç Try following those steps in different orders and see what comes out. Not the same, is it?\nSelection Algorithms can use selection to determine a different set of steps to execute based on a Boolean expression.\nHere‚Äôs an improved algorithm for Pig Latin that handles words that starts with vowels, so that ‚Äúeggs‚Äù becomes ‚Äúeggs-yay‚Äù instead of the unpronounceable ‚Äúggs-eay‚Äù:\n1. Append \"-\" 2. If first letter is vowel, then: a. Append \"yay\" 3. Otherwise: a. Append first letter b. Append \"ay\" c. Remove first letter Iteration Algorithms often use repetition to execute steps a certain number of times or until a certain condition is met.\nWe can add iteration to the previous algorithm to translate a complete phrase, so that ‚Äúpeanut butter and jelly‚Äù becomes ‚Äúeanut-pay utter-bay and-yay elly-jay‚Äù:\n1. Store list of words 2. For each word in words: a. Append hyphen b. If first letter is vowel, then: i. Append \"yay\" c. Otherwise: i. Append first letter ii. Append \"ay\" iii. Remove first letter By combining sequencing, selection, and iteration, we‚Äôve successfully come up with an algorithm for Pig Latin translation.\nü§î Can you think of situations where it produces an incorrect output?\n","categories":"","description":"","excerpt":"from Khan Academy\nAn algorithm is a mindless, step by step process ‚Ä¶","ref":"/8/vehicles/programming/constructs/","tags":"","title":"Constructs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/games/01gettingstarted/","tags":"","title":"Getting started"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/vehicles/gettingstarted/","tags":"","title":"Getting Started"},{"body":"To control the LEGO Mindstorms robots running ev3dev, you will need to:\nOpen the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Install the EV3 MicroPython extension ","categories":"","description":"","excerpt":"To control the LEGO Mindstorms robots running ev3dev, you will need ‚Ä¶","ref":"/8/vehicles/gettingstarted/installation/","tags":"","title":"Installing software"},{"body":"To develop games using Pygame Zero, you have two main options:\nuse Mu use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.\nAfter you have been writing code for a while, you may find that a standard Python environment and a ‚Äúfull‚Äù text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.\nAn example of this is that Mu will automatically add the necessary first and last lines to your Pygame Zero file.\nThe very top line, line 1, must read:\nimport pgzrun And the very last line must read:\npgzrun.go() If you are using Mu, it will automatically add these lines if you forget. With VS Code or another editor, you will need to do this yourself.\nUsing Mu Install Mu, using the Company Portal (on a school computer), or from the website. You‚Äôre done!\nThere is a beginner‚Äôs guide to Mu, if you want more help on how to use Mu.\nTo make games in Pygame Zero, make sure you select the mode Pygame Zero.\nUsing Visual Studio Code From the Company Portal (on a school computer), or using the links below, install:\nVisual Studio Code Python ","categories":"","description":"","excerpt":"To develop games using Pygame Zero, you have two main options:\nuse Mu ‚Ä¶","ref":"/8/games/01gettingstarted/software/","tags":"","title":"Software"},{"body":"adapted from PyBricks\nHaving to control the two motors independently to move our vehicle would involve figuring out a lot of maths ourselves, which would be annoying, time-consuming and error-prone.\nInstead, we can use the DriveBase class to make driving our robot around a lot simpler.\nEV3-compatible motors. Arrows indicate the default positive direction. Import We also need to import the code for the Motor.\nfrom pybricks.ev3devices import Motor from pybricks.robotics import DriveBase Setup We also need to initialize the motors:\n# Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) By specifying the dimensions of your robot, this class makes it easy to drive a given distance in millimeters or turn by a given number of degrees.\nPositive distances, radii, or drive speeds mean driving forward. Negative means backward.\nPositive angles and turn rates mean turning right. Negative means left. So when viewed from the top, positive means clockwise and negative means counterclockwise.\nParameters:\nleft_motor, the motor that drives the left wheel. right_motor, the motor that drives the right wheel. wheel_diameter, diameter of the wheels in millimetres (mm). axle_track, distance between the points where the left and right wheels touch the ground, in millimetres (mm). Functions Driving in the foreground The following functions operate in the foreground, meaning that the robot will drive a given distance, or turn by a given angle, then stop, and then move on to the next instruction. The distance/angle travelled is measured using the rotation sensors in the motor units. Because wheels may slip while moving, the travelled distance and angle are only estimates.\nstraight(distance) Drives straight for a given distance and then stops.\nParameters:\ndistance, distance to travel in millimetres (mm). turn(angle) Turns in place by a given angle and then stops.\nParameters:\nangle, angle to turn in degrees (¬∞). curve(radius, angle) Drives an arc along a circle of a given radius, by a given angle.\nParameters: radius (dimension: mm) ‚Äì Radius of the circle. angle (angle: deg) ‚Äì Angle along the circle.\nDriving in the background If you want the robot to do things while it is driving (for example, check on the values of sensors), you need to use the drive() function. Unlike the ones above, this will start the wheels turning, and then immediately move on to the next instruction, while the wheels remain turning. They will keep travelling in the same way unless another movement instruction or a stop() instruction is given.\ndrive(drive_speed, turn_rate) Starts driving at the specified speed and turn rate. Both values are measured at the center point between the wheels of the robot. It keeps going until you use stop() or change course by using drive() again. For example, you can drive until a sensor is triggered and then stop or turn around.\nParameters:\ndrive_speed, speed of the robot in millimetres per second (mm/s). turn_rate, turn rate of the robot in degrees per second (¬∞/s). stop() Stops the robot by letting the motors spin freely.\nExample # Go forward and backwards for one metre. robot.straight(1000) robot.straight(-1000) # Turn clockwise by 360 degrees and back again. robot.turn(360) robot.turn(-360) ","categories":"","description":"","excerpt":"adapted from PyBricks\nHaving to control the two motors independently ‚Ä¶","ref":"/8/vehicles/inputsoutputs/drive/","tags":"","title":"DriveBase"},{"body":"Flowcharts are a visual representation of an algorithm. A flowchart normally uses a combination of blocks and arrows to represent actions and sequences. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.\nSequencing 1. Append \"-\". 2. Append first letter 3. Append \"ay\" 4. Remove first letter Selection 1. Append \"-\" 2. If first letter is vowel, then: a. Append \"yay\" 3. Otherwise: a. Append first letter b. Append \"ay\" c. Remove first letter Iteration 1. Store list of words 2. For each word in words: a. Append hyphen b. If first letter is vowel, then: i. Append \"yay\" c. Otherwise: i. Append first letter ii. Append \"ay\" iii. Remove first letter ","categories":"","description":"","excerpt":"Flowcharts are a visual representation of an algorithm. A flowchart ‚Ä¶","ref":"/8/vehicles/programming/flowcharts/","tags":"","title":"Flowcharts"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/vehicles/inputsoutputs/","tags":"","title":"Inputs and Outputs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/games/02basics/","tags":"","title":"Learning the basics"},{"body":"Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).\nDigital Tech/ ‚îÇ ‚îú‚îÄ‚îÄ firstGame/ ‚îÇ ‚îî‚îÄ‚îÄ game.py ‚îÇ ‚îú‚îÄ‚îÄ secondGame/ ‚îÇ ‚îî‚îÄ‚îÄ game.py ‚îÇ ‚îú‚îÄ‚îÄ thirdGame/ ‚îÇ ‚îî‚îÄ‚îÄ game.py ‚îÇ ‚îî‚îÄ‚îÄ fourthGame/ ‚îî‚îÄ‚îÄ game.py Within each of those folders, there will be the python file with your game code in it, along with some other files and folders. Here is an example of a more complex project:\nmyGame/ ‚îú‚îÄ‚îÄ game.py ‚îÇ ‚îú‚îÄ‚îÄ images/ ‚îÇ ‚îú‚îÄ‚îÄ someImage.png ‚îÇ ‚îú‚îÄ‚îÄ anotherImage.jpg ‚îÇ ‚îî‚îÄ‚îÄ ... # sprites, tiles and other image files ‚îÇ ‚îú‚îÄ‚îÄ fonts/ ‚îÇ ‚îî‚îÄ‚îÄ ... # any font files ‚îÇ ‚îú‚îÄ‚îÄ sounds/ ‚îÇ ‚îî‚îÄ‚îÄ ... # any sound files ‚îÇ ‚îî‚îÄ‚îÄ music/ ‚îî‚îÄ‚îÄ ... # any music files You don‚Äôt need to have those folders unless you have something to put in them.\nCheck your version of Mu If you are using a version of Mu older than 1.1.0-alpha.2, the shortcut buttons in Pygame Zero mode (Images, Sounds, Fonts and Music) will open folders in Mu‚Äôs default save location. If you have saved your project in a different location (like your OneDrive) you won‚Äôt be able to use these shortcut buttons, as they won‚Äôt open the right folders.\nFrom 1.1.0-alpha.2 onwards, the buttons will open folders relative to the file you have open, so they will always work, regardless of where you save your game file.\n","categories":"","description":"","excerpt":"Each of your projects should live in its own folder somewhere sensible ‚Ä¶","ref":"/8/games/01gettingstarted/filestructure/","tags":"","title":"Structuring your files"},{"body":"from Coding Games with Pygame Zero \u0026 Python, by Richard Smith\nThese programs can be entered using any text editor, but I suggest using the Mu editor because it comes with Python, Pygame Zero and other libraries all pre-installed in one easy download.\n3.1. Hello, world The traditional first program used to make sure Python is working and that we can run programs.\nIf using the Mu editor:\nClick the mode button and make sure the mode is set to Python3. Type in the program. Click Save and enter a name for the program. Click Run. Program 3.1 Hello, world\n1 2 3 print(\"Hello world\") # This line is a comment. The computer will ignore these. 3.2. Getting input from the keyboard This program will pause and wait for you to enter some text with the keyboard, followed by the return/enter key. The text you enter is stored in a variable, x.\nProgram 3.2 Getting input from the keyboard\n1 2 3 4 5 print(\"Enter your name:\") x = input() print(\"Hello\", x) if x == \"richard\": print(\"That is a very cool name\") Exercise Add some names of your friends and display a different message for each friend.\n3.3. Making decisions: if, elif, else This is how to add another name to Program 3.2.\nProgram 3.3 Decisions: if, elif, else 1 2 3 4 5 6 7 8 9 print(\"Enter your name:\") x = input() print(\"Hello\", x) if x == \"richard\": print(\"That is a very cool name\") elif x == \"nick\": print(\"That is a rubbish name\") else: print(\"I do not know your name\", x) Program 3.3 is very similar to Program 3.2. The new lines have been highlighted. You can either modify Program 3.2, or else create a new file and use copy and paste to copy the code from the old program into the new.\n3.4. A random maths question Program 3.4 A random maths question 1 2 3 4 5 6 7 8 9 10 import random n = random.randint(0, 10) print(\"What is\", n, \"plus 7?\") g = int(input()) # Why do we use int() here? if g == n + 7: print(\"Correct\") else: print(\"Wrong\") Exercise Add some more questions, e.g.\nInstead of 7, use another random number. Use a bigger random number. Multiply (use *), divide (use /) or subtract (use -) numbers. Exercise Print how many questions the player got correct at the end.\n3.5. Keeping score We create a score variable to record how many questions the player answered correctly.\nProgram 3.5 Keeping score 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 score = 0 print(\"What is 1+1 ?\") g = int(input()) if g == 2: print(\"Correct\") score = score + 1 print(\"What is 35-25 ?\") g = int(input()) if g == 10: print(\"Correct\") score = score + 1 print(\"Your score:\", score) 3.6. Guessing game with a loop This while loop goes round and round forever ‚Ä¶ or until the player gets a correct answer, and then it breaks out of the loop. Note that everything in the loop is indented.\nProgram 3.6 Guessing game with a loop 1 2 3 4 5 6 7 8 9 10 11 12 import random n = random.randint(0, 10) while True: print(\"I am thinking of a number, can you guess what it is?\") g = int(input()) if g == n: break else: print(\"Wrong\") print(\"Correct!\") Exercise Give a hint to the player when they are wrong. Was their guess too high or too low?\nExercise Print how many guesses they took to get it right at the end.\n3.7. Improved guessing game Program 3.6 with a hint whether the guess is greater or lesser than the answer.\nProgram 3.7 Improved guessing game 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random n = random.randint(0, 100) guesses = 0 while True: guesses = guesses + 1 print(\"I am thinking of a number, can you guess what it is?\") g = int(input()) if g == n: break elif g \u003c n: print(\"Too low\") elif g \u003e n: print(\"Too high\") print(\"Correct! You took\", guesses, \"guesses.\") ","categories":"","description":"","excerpt":"from Coding Games with Pygame Zero \u0026 Python, by Richard Smith\nThese ‚Ä¶","ref":"/8/games/02basics/textbasedgames/","tags":"","title":"Text-based quiz games"},{"body":"Taken from pybricks.com\nAn EV3 brick Turning the EV3 Brick on and off Turn on the EV3 Brick by pressing the dark gray center button.\nThe boot process may take several minutes. While booting, the EV3 Brick status light turns orange and blinks intermittently, and you‚Äôll see a lot of text on the EV3 screen. The EV3 Brick is ready for use when the status light turns green.\nTo turn the EV3 Brick off, open the shutdown menu with the back button, and then select Power Off using the center button, as shown in Figure 5.\nFigure 5: Turning the EV3 Brick off Viewing motor and sensor values When you‚Äôre not running a program, you can view motor and sensor values using the device browser, as shown in Figure 6.\nFigure 6: Viewing motor and sensor values Running a program without a computer You can run previously downloaded programs directly from the EV3 Brick.\nTo do so, find the program using the file browser on the EV3 screen and press the center button key to start the program as shown in Figure 7.\nFigure 7: Starting a program using the buttons on the EV3 Brick ","categories":"","description":"","excerpt":"Taken from pybricks.com\nAn EV3 brick Turning the EV3 Brick on and off ‚Ä¶","ref":"/8/vehicles/gettingstarted/usingev3/","tags":"","title":"Using the EV3 brick"},{"body":"Taken from pybricks.com\nProject structure Now that you‚Äôve set up your computer and EV3 Brick, you‚Äôre ready to start writing programs.\nTo make it easier to create and manage your programs, let‚Äôs first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.\nPrograms are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.py) and other optional scripts or files. This project folder and all of its contents will be copied to the EV3 Brick, where the main program will be run.\nThis page shows you how to create such a project and how to transfer it to the EV3 Brick.\nFigure 8: A project contains a program called main.py and optional resources like sounds or MicroPython modules. Creating a new project To create a new project, open the EV3 MicroPython tab and click create a new project, as shown in Figure 9. Enter a project name in the text field that appears and press Enter. When prompted, choose a location for this program and confirm by clicking choose folder.\nFigure 9: Creating a new project. This example is called getting_started, but you can choose any name. When you create a new project, it already includes a file called main.py. To see its contents and to modify it, open it from the file browser as shown in Figure 10. This is where you‚Äôll write your programs.\nIf you are new to MicroPython programming, we recommend that you keep the existing code in place and add your code to it.\nFigure 10: Opening the default main.py program. Opening an existing project To open a project you created previously, click File and click Open Folder, as shown in Figure 11. Next, navigate to your previously created project folder and click OK. You can also open your recently used projects using the Open Recent menu option.\nFigure 11: Opening a previously created project. Connecting to the EV3 Brick with Visual Studio Code To be able to transfer your code to the EV3 Brick, you‚Äôll first need to connect the EV3 Brick to your computer with the mini-USB cable and configure the connection with Visual Studio Code. To do so:\nTurn the EV3 Brick on Connect the EV3 Brick to your computer with the mini-USB cable Configure the USB connection as shown in Figure 12. Figure 12: Configuring the USB connection between the computer and the EV3 Brick Downloading and running a program You can press the F5 key to run the program. Alternatively, you can start it manually by going to the debug tab and clicking the green start arrow, as shown in Figure 13.\nWhen the program starts, a pop-up toolbar allows you to stop the program if necessary. You can also stop the program at any time using the back button on the EV3 Brick.\nIf your program produces any output with the print command, this is shown in the output window.\nFigure 13: Running a program Expanding the example program Now that you‚Äôve run the basic code template, you can expand the program to make a motor move. First, attach a Large Motor to Port B on the EV3 Brick, as shown in Figure 14.\nFigure 14: The EV3 Brick with a Large Motor attached to port B. Next, edit main.py to make it look like this:\n#!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port # Create your objects here # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize a motor at port B. test_motor = Motor(Port.B) # Write your program here # Play a sound. ev3.speaker.beep() # Run the motor up to 500 degrees per second. To a target angle of 90 degrees. test_motor.run_target(500, 90) # Play another beep sound. ev3.speaker.beep(frequency=1000, duration=500) This program makes your robot beep, rotate the motor, and beep again with a higher pitched tone. Run the program to make sure that it works as expected.\nManaging files on the EV3 Brick After you‚Äôve downloaded a project to the EV3 Brick, you can run, delete, or back up programs stored on it using the device browser as shown in Figure 15.\nFigure 15: Using the EV3 device browser to manage files on your EV3 Brick ","categories":"","description":"","excerpt":"Taken from pybricks.com\nProject structure Now that you‚Äôve set up your ‚Ä¶","ref":"/8/vehicles/gettingstarted/creatingprograms/","tags":"","title":"Creating and running programs"},{"body":"adapted from Coding Games with Pygame Zero \u0026 Python, by Richard Smith\nTo create graphics for our games we will use the Pygame Zero library. You will find the documentation on the website useful!\nThe smallest square that can be displayed on a monitor is called a pixel. This diagram shows a close-up view of a window that is 40 pixels wide and 40 pixels high. At normal size you will not see the grid lines.\nPixel grid We can refer to any pixel by giving two co-ordinates, (x, y). Make sure you understand co-ordinates before moving on because everything we do in Pygame Zero will use it. (In maths this called a Cartesian coordinate system).\n4.1. Lines and circles If are using the Mu editor, Pygame Zero is built-in, but you must remember to click ‚ÄòMode‚Äô and select ‚ÄòPygame Zero‚Äô before running your program!\nIf you are using a different editor, instructions are online.\nProgram 4.1 Lines and circles\n1 2 3 4 5 6 7 8 9 10 WIDTH = 500 # What are these units? What if we change them? HEIGHT = 500 # What if we delete this line? def draw(): screen.clear() screen.draw.circle((250, 250), 50, \"white\") screen.draw.filled_circle((250, 100), 50, \"red\") screen.draw.line((150, 20), (150, 450), \"purple\") screen.draw.line((150, 20), (350, 20), \"purple\") Exercise Finish drawing this picture.\nExercise Draw your own picture.\n4.2. Moving rectangles To make things move we need to add the special update() function. We don‚Äôt need to write our own loop because Pygame Zero calls this function for us in its own loop, over and over, many times per second.\nProgram 4.2 Moving rectangles\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 WIDTH = 500 HEIGHT = 500 box = Rect((20, 20), (50, 50)) def draw(): screen.clear() screen.draw.filled_rect(box, \"red\") def update(): box.x = box.x + 2 if box.x \u003e WIDTH: box.x = 0 Exercise Make the box move faster.\nExercise Make the box move in different directions.\nExercise Make two boxes with different colours.\n4.3. Actor sprites Actor sprites are very similar to boxes! Click Images to see the folder of image files available. alien.png should already be there, but for other images you must add the files yourself.\nYou could use Microsoft Paint which comes with Windows but I recommend you download and install Krita.\nProgram 4.3 Actor sprites\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 WIDTH = 500 HEIGHT = 500 alien = Actor('alien') alien.x = 0 alien.y = 50 def draw(): screen.clear() alien.draw() def update(): alien.x += 2 if alien.x \u003e WIDTH: alien.x = 0 Exercise Draw or download your own image to use instead of alien.\n4.4. Background image We are going to add a background image to Program 4.3.\nClick Images to see the folder of image files available.\nYou must create or download a picture to use a background. Save it as background.png in the directory that opens when you click Images. It should be the same size as the window, 500√ó500 pixels and it must be in .png format.\nProgram 4.4 Background\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 WIDTH = 500 HEIGHT = 500 alien = Actor('alien') alien.x = 0 alien.y = 50 background = Actor('background') def draw(): screen.clear() background.draw() alien.draw() def update(): alien.x += 2 if alien.x \u003e WIDTH: alien.x = 0 Exercise Create a picture to use a background. Save it as background.png. Run the program.\n","categories":"","description":"","excerpt":"adapted from Coding Games with Pygame Zero \u0026 Python, by Richard Smith ‚Ä¶","ref":"/8/games/02basics/graphics/","tags":"","title":"Drawing graphics"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/vehicles/programming/","tags":"","title":"Programming"},{"body":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect data about its surroundings. The Touch Sensor detects when its red button has been pressed or released.\nAn EV3 touch sensor Import from pybricks.ev3devices import TouchSensor Setup # Initialize Touch Sensor touch_sensor = TouchSensor(Port.S1) Functions pressed() Checks if the sensor is pressed.\nReturns:\nTrue if the sensor is pressed, False if it is not pressed. Example # Beep when touch sensor is pressed while True: if button.pressed(): ev3.speaker.beep() # Drive forward until touch sensor is pressed robot.drive(1000, 0) while not touch_sensor.pressed(): pass robot.stop() ","categories":"","description":"","excerpt":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect ‚Ä¶","ref":"/8/vehicles/inputsoutputs/touch/","tags":"","title":"Touch sensor"},{"body":"adapted from Coding Games with Pygame Zero \u0026 Python, by Richard Smith\nKeyboard input The alien moves when you press the cursor keys.\nProgram 4.5 Keyboard input\n1 2 3 4 5 6 7 8 9 10 11 12 alien = Actor('alien') alien.pos = (0, 50) def draw(): screen.clear() alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 Exercise Make the alien move up and down as well as left and right.\nExercise Use the more concise += operator to change the alien.x value.\nExercise Use the or operator to allow WASD keys to move the alien in addition to the cursor keys.\n5.1. Collisions Arcade games need to know when one Actor sprite has hit another Actor sprite. Most of this code is copied from Program 4.2 and Program 4.5.\nProgram 5.1 Collisions\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 WIDTH = 500 HEIGHT = 500 alien = Actor(\"alien\") alien.pos = (400, 50) box = Rect((20, 20), (100, 100)) def draw(): screen.clear() screen.draw.filled_rect(box, \"red\") alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 box.x = box.x + 2 if box.x \u003e WIDTH: box.x = 0 if alien.colliderect(box): print(\"hit\") Exercise Add vertical movement (as you did in Exercise Program 4.5).\nExercise Make the box chase the alien.\nExercise Print number of times the box hits the alien (i.e. the score).\n5.2. ChaseÔÉÅ Instead of moving constantly to the right we can make the movement conditional with an if statement so the box chases the alien. Most of this code is copied from Program 5.1. New lines are highlighted. We have also changed what happens when the box catches the alien: the program now exits and you must run it again to play again. This may not be what you want in your game!\nProgram 5.2 Alien chase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 WIDTH = 500 HEIGHT = 500 alien = Actor(\"alien\") alien.pos = (400, 50) box = Rect((20, 20), (100, 100)) def draw(): screen.clear() screen.draw.filled_rect(box, \"red\") alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 if box.x \u003c alien.x: box.x = box.x + 1 if box.x \u003e alien.x: box.x = box.x - 1 if alien.colliderect(box): exit() Exercise Add vertical movement (as you did in previous exercise).\nExercise Draw a new enemy image. Save it as enemy.png in your mu_code/images folder. Load it as an Actor(‚Äòenemy‚Äô) instead of the Rect().\n5.3. Powerup Instead of an enemy the box here is a powerup that the player must collect. When he does it disappears and moves to a new location.\nProgram 5.3 Collect the powerups\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 WIDTH = 500 HEIGHT = 500 import random alien = Actor(\"alien\") alien.pos = (400, 50) box = Rect((20, 20), (100, 100)) score = 0 def draw(): screen.clear() screen.draw.filled_rect(box, \"green\") alien.draw() def update(): global score if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 if alien.colliderect(box): box.x = random.randint(0, WIDTH) box.y = random.randint(0, HEIGHT) score = score + 1 print(\"Score:\", score) Exercise Add vertical movement (as you did in Exercise ref{exercise:updown}).\nExercise Draw a new powerup image. Save it as powerup.png in your mu_code/images folder. Load it as an Actor(‚Äòpowerup‚Äô) instead of the Rect().\nAdvanced Combine this program with the enemy from Program Program 5.2 and the background from Program 4.4 and whatever else you want to make your own game.\n5.4. Sound and animation Pygame Zero comes with one other image alien_hurt.png and one sound eep.wav. If you want more you will have to add them to the sounds and images folders.\nMost of this code is copied from Program 5.1\nProgram 5.4 Sound and animation upon collision 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 WIDTH = 500 HEIGHT = 500 alien = Actor(\"alien\") alien.pos = (0, 50) box = Rect((20, 20), (100, 100)) def draw(): screen.clear() screen.draw.filled_rect(box, \"red\") alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 box.x = box.x + 2 if box.x \u003e WIDTH: box.x = 0 # PLAY SOUND AND SHOW IMAGE WHEN HIT if alien.colliderect(box): alien.image = 'alien_hurt' sounds.eep.play() else: alien.image = 'alien' Exercise Record your own sound effect and add it to the game.\nAdvanced Add more boxes or sprites that move in different ways for the player to avoid.\nAdvanced Add a second alien controlled by different keys or gamepad for player 2.\n5.5. Mouse clicks This uses a function call-back for event-based input. It is similar to Program 5.4 but:\nThe box has been removed.\nThere is an on_mouse_down() special function that is called automatically when the player click the mouse.\nThe score is displayed.\nSee Program 2.17 for more about functions.\nProgram 5.5 Getting input from mouse clicks\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 alien = Actor(\"alien\") alien.pos = (0, 50) score = 0 def draw(): screen.clear() alien.draw() screen.draw.text(\"Score \"+str(score), (0,0)) def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 alien.image = 'alien' def on_mouse_down(pos, button): global score if button == mouse.LEFT and alien.collidepoint(pos): alien.image = 'alien_hurt' sounds.eep.play() score = score + 1 5.6. Mouse movement Program 5.6 Getting input from mouse movementÔÉÅ\nwiggle your mouse around the screen! 1 2 3 4 5 6 7 8 alien = Actor(\"alien\") def draw(): screen.clear() alien.draw() def on_mouse_move(pos): alien.pos = pos Exercise What happens if you delete line 8 and replace it with this:\nanimate(alien, pos=pos, duration=1, tween=‚Äòbounce_end‚Äô)\nExercise What happens if you change on_mouse_move to on_mouse_down?\nAdvanced Make a game with one alien controlled by mouse and another controlled by keyboard\n","categories":"","description":"","excerpt":"adapted from Coding Games with Pygame Zero \u0026 Python, by Richard Smith ‚Ä¶","ref":"/8/games/02basics/arcade/","tags":"","title":"Arcade games"},{"body":"Overview The basic structure of any EV3 program is:\nthe shebang line the docstring import libraries setup program body (the part where you tell the robot what to do) Shebang #! The shebang line is a piece of Unix trickery from about 1980 which has stuck around because it is rather useful. You don‚Äôt need to understand what it is doing or why it is there, but it is vitally important (in big letters) that this line appears exactly as it does below, and that it is at the very start of the program file (no blank lines above it, or spaces in front of it).\n#!/usr/bin/env pybricks-micropython If your program doesn‚Äôt work, check this first!\nDocstring The next lines, within the \"\"\" (three double-quote marks), are explanatory text about what the program in this file does. It is customary to do this in Python for the benefit of anyone else who might come across your code (including you in the future), but your program will work if you don‚Äôt.\n\"\"\" Example LEGO¬Æ MINDSTORMS¬Æ EV3 Robot Educator Driving Base Program ----------------------------------------------------------------- This program requires LEGO¬Æ EV3 MicroPython v2.0. Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3 Building instructions can be found at: https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot \"\"\" Importing see import for more detail\nAny but the simplest of programs will use code from one or more modules. A module is chunk of code that does some useful stuff that lots of different developers would want to do again and again: do maths, search for and sort data, connect to and work with databases, use various bits of hardware (like an EV3 brick!). There is a standard library included with Python, where the most common modules can be found, and you can download and use other modules when you need to.\nfrom pybricks.hubs import EV3Brick from pybricks.parameters import Port, Stop from pybricks.robotics import DriveBase from pybricks.tools import wait from pybricks.ev3devices import Motor, TouchSensor, ColorSensor In the code above, you can get the sense that pybricks is a very large library with lots of different parts. One of those parts is called parameters, and on the highlighted line we tell the computer we will need two things from the parameter part of the pybricks module: the things called Port and Stop. The dot notation is how you show things that are parts of other things:\npybricks.parameters means the parameters part of pybricks; pybricks.parameters.Stop means the Stop part of the parameters part of pybricks. Setup Now that we have all the bits of code we will need, we need to tell the computer about the things we‚Äôll be using and where they‚Äôre connected.\nWe need to set up:\nthe EV3 brick itself, the motors the DriveBase, if it‚Äôs a vehicle, the sensors that we are using, making sure that the ports you list in this part of the code match up with where you‚Äôve actually connected each of the components. Since we are making a vehicle that drives, rather than, say, a stationary factory robot on an assembly line, we set up the motors for our wheels using a DriveBase, which has a lot of handy driving-around kind of functions.\n# Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) # Initialize the Touch Sensor. touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor. color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor. ultrasonic_sensor = UltrasonicSensor(Port.S4) ","categories":"","description":"","excerpt":"Overview The basic structure of any EV3 program is:\nthe shebang line ‚Ä¶","ref":"/8/vehicles/gettingstarted/programstructure/","tags":"","title":"Structure of program"},{"body":"adapted from PyBricks\nThe Ultrasonic Sensor is a digital sensor that can measure the distance to an object in front of it. It does this by sending out high frequency sound waves and measuring how long it takes the sound to reflect back to the sensor. The sound frequency is too high for you to hear.\nDistance to an object is measured in millimeters (mm). This allows you to program your robot to stop at a certain distance from a wall.\nAn EV3 ultrasonic sensor Import from pybricks.ev3devices import UltrasonicSensor Setup # Initialize the Ultrasonic Sensor. obstacle_sensor = UltrasonicSensor(Port.S4) Functions distance()distance(silent) Measures the distance between the sensor and an object using ultrasonic sound waves.\nParameters:\nsilent (bool): False by default. Choose True to turn the sensor off after measuring the distance. This reduces interference with other ultrasonic sensors. If you do this too frequently, the sensor can freeze. If this happens, unplug it and plug it back in. Returns:\ndistance in mm presence() Checks for the presence of other ultrasonic sensors by detecting ultrasonic sounds.\nIf the other ultrasonic sensor is operating in silent mode, you can only detect the presence of that sensor while it is taking a measurement.\nReturns:\nTrue if ultrasonic sounds are detected, False if not. Example # Drive forward until an object is no more than 30cm away robot.drive(200, 0) while obstacle_sensor.distance() \u003e 300: pass robot.stop() ","categories":"","description":"","excerpt":"adapted from PyBricks\nThe Ultrasonic Sensor is a digital sensor that ‚Ä¶","ref":"/8/vehicles/inputsoutputs/ultrasonic/","tags":"","title":"Ultrasonic sensor"},{"body":"This is a nine-part walkthrough to set up a very basic game. Most of the videos are about 5 mins long.\nMake a player Move the player Make a target Randomise the target Collect the target Keep the score Display the score Make multiple targets A comment on comments ","categories":"","description":"","excerpt":"This is a nine-part walkthrough to set up a very basic game. Most of ‚Ä¶","ref":"/8/games/02basics/basicgamewalkthrough/","tags":"","title":"Basic game walkthrough"},{"body":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect data about is surroundings. The Color Sensor can detect color and reflected light.\nColor vs colour In almost all programming, American spellings are used. So as programmers we use color and colors, even though we would normally spell the words colour and colours. An EV3 color sensor Import from pybricks.ev3devices import ColorSensor Setup # Initialize the sensors. line_sensor = ColorSensor(Port.S1) Functions reflection() Measures the reflection of a surface using a red light.\nReturns:\nreflection, ranging from 0 (no reflection) to 100 (high reflection). rgb() Measures the reflection of a surface using a red, green, and then a blue light.\nReturns:\ntuple of reflections for red, green, and blue light, each ranging from 0.0 (no reflection) to 100.0 (high reflection). (r, g, b) color() Measures the color of a surface.\nReturns:\nColor.BLACK, Color.BLUE, Color.GREEN, Color.YELLOW, Color.RED, Color.WHITE, Color.BROWN, or None if no color is detected. ambient() Measures the ambient light intensity.\nReturns:\nambient light intensity, ranging from 0 (dark) to 100 (bright). Example # Go forward while reflected light is less than 10. ev3.speaker.beep() robot.drive(100,0) while line_sensor.reflection() \u003c 10: wait(10) robot.stop() ","categories":"","description":"","excerpt":"adapted from PyBricks\nA sensor lets an EV3 program measure and collect ‚Ä¶","ref":"/8/vehicles/inputsoutputs/color/","tags":"","title":"Color sensor"},{"body":"Comments are a way of leaving messages for other humans (or you in the future) in your program. They are a vital part of programming, and critical to writing good code that works.\nComments are indicated using some combination of symbols, and the computer is programmed to ignore them, so you can write anything you like, and not have to worry about the computer trying to make sense of it. Because the computer ignores any text that is a comment, we can also use comments to ‚Äúturn off‚Äù some lines of our program temporarily by ‚Äúcommenting them out‚Äù.\nIn Python, any time the computer comes across a # (hash) symbol, it will ignore the rest of the line. Most text editors have a way to automatically add and remove comments from a selection of code. In Visual Studio Code, the shortcut for toggling comment markers is Ctrl+/ (Cmd+/ on a Mac).\n# This is a comment Why do we need comments? Because computers are brainless machines with no clue about anything, computer programs are extremely thorough, step-by-step sequences of instructions that tell the computer exactly what to do. They don‚Äôt, however, provide any clue about what the program is for, why you might want to use it, or why certain bits of code are included.\nComments allow a human reader to get a ‚Äúbig picture‚Äù sense of what chunks of the program, and the program as a whole, are about, and why certain decisions have been made. They are also used to leave reminders about things that still need to be fixed, things which might cause trouble later, and places where a problem has been found but a solution hasn‚Äôt been worked out yet.\n","categories":"","description":"","excerpt":"Comments are a way of leaving messages for other humans (or you in the ‚Ä¶","ref":"/8/vehicles/gettingstarted/comments/","tags":"","title":"Comments"},{"body":"This is a simple example which:\nbeeps, moves forward 100mm (10cm), moves backward 100mm, turns 360¬∞ on the spot, beeps again. Each of these steps happens to correspond with a line of code:\nev3.speaker.beep() robot.straight(100) robot.straight(-100) robot.turn(360) ev3.speaker.beep() Complete program Here is the complete program, complete with headings marking the major parts of the program structure. You can see on lines 44, 47, and 50 there are lines of code that are commented out because we don‚Äôt need them, but they might be handy in the future!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #!/usr/bin/env pybricks-micropython # ^ Shebang line above ^ ############################################## # Docstring ############################################## \"\"\" Example LEGO¬Æ MINDSTORMS¬Æ EV3 Robot Educator Driving Base Program ----------------------------------------------------------------- This program requires LEGO¬Æ EV3 MicroPython v2.0. Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3 Building instructions can be found at: https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot \"\"\" ############################################## # Import code ############################################## from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port from pybricks.robotics import DriveBase from pybricks.tools import wait ############################################## # Setup ############################################## # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) # Initialize the Touch Sensor. # touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor. # color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor. # ultrasonic_sensor = UltrasonicSensor(Port.S4) ############################################## # Program body ############################################## ev3.speaker.beep() robot.straight(100) robot.straight(-100) robot.turn(360) ev3.speaker.beep() ","categories":"","description":"","excerpt":"This is a simple example which:\nbeeps, moves forward 100mm (10cm), ‚Ä¶","ref":"/8/vehicles/gettingstarted/asimpleexample/","tags":"","title":"A starting example"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/glossary/","tags":"","title":"Glossary"},{"body":"Here are some things to try if your program won‚Äôt run on the EV3.\nCheck that the shebang line hasn‚Äôt been mangled. It is easy to add a space to the left or a line above, and that will break it. Make sure all the plugs are properly seated in their sockets by pushing them in a little bit. If you hear a click, that one wasn‚Äôt in properly, but should be now! Check that the sensors and motors that you‚Äôve declared in your program are actually plugged in to the ports you have said they are. If not, you can either rewire them so they match the program, or change the program to match the wiring. Plug the robot back into the computer and reconnect it. Use the debugging mode: Run \u003e Start Debugging, and there should be a helpful message at the bottom of the window about what is confusing the computer. ","categories":"","description":"","excerpt":"Here are some things to try if your program won‚Äôt run on the EV3. ‚Ä¶","ref":"/8/vehicles/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"These are from the Platformer Pack Redux, available along with many other excellent asset sets at kenney.nl.\n","categories":"","description":"","excerpt":"These are from the Platformer Pack Redux, available along with many ‚Ä¶","ref":"/8/games/02basics/assetsplatform/","tags":"","title":"Sample Assets (Side)"},{"body":"These are from the Space Shooter Redux, available along with many other excellent asset sets at kenney.nl.\n","categories":"","description":"","excerpt":"These are from the Space Shooter Redux, available along with many ‚Ä¶","ref":"/8/games/02basics/assetsspace/","tags":"","title":"Sample Assets (Top)"},{"body":" LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial ","categories":"","description":"","excerpt":" LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial ","ref":"/8/vehicles/reference/","tags":"","title":"Reference"},{"body":"In teams of two, design algorithms using flowcharts to create an automated, driverless vehicle that can:\nstop at a line, follow a line, and travel between two lines. Explore how an automated vehicle might be guided along a road or track and how line detection could be used to save lives. Design ways to improve driving safety by helping to prevent drivers from falling asleep and causing an accident.\nTask Description You will need to complete all the following sections as part of your collaborative presentation:\nDrive and stop at a line Design a flowchart for the automated vehicle to stop at a line. Working code with comments Validation video Following a line Design a flowchart for the automated, driverless vehicle to follow a line. Working code with comments Validation video Explain how an automated vehicle might be guided along a road or track. Once the wheeled robot is following the line, can it be improved to behave more like a car (i.e., move in a straight line rather than a wiggle)? Detecting lane changes To simulate what could happen if a driver falls asleep while driving, your robot could sound an alarm signal when it crosses the line. Program your robot to perform this function. Add you working code with comments. What can happen if a driver falls asleep while driving? How can we detect when a driver is falling asleep? How could you improve your program? Extension Simulate a vehicle‚Äôs behaviour at traffic lights by having their wheeled robot respond to a series of green and red signals. Placing the code inside a loop allows for the possibility of multiple ‚Äútraffic lights‚Äù along a track. Use the technic beams available in the EV3 core set to simulate green and red lights. Place the beams on the table so the Color Sensor can detect them while rolling over them. To Be Successful Appropriate protocols when taking a photos/videos of others. Acknowledge sources appropriately including graphics Plan and implement consistent and logical navigation Include hyperlinks to navigate the presentation Reference sources appropriately Complete at least all items of first 3 parts of this task. Learning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in Python coding challenges with persistence and learns from their mistakes and willingly completes the extension activities. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project ","categories":"","description":"","excerpt":"In teams of two, design algorithms using flowcharts to create an ‚Ä¶","ref":"/8/assessment/vehicles/1-follow/","tags":"","title":"1: Follow the line"},{"body":"In teams of two, you will design algorithms using flowcharts to create an automated, driverless vehicle that can navigate an obstacle course. You will then adapt your code to use a touch sensor and an ultrasonic sensor to complete the same course, and make comparisons between the solutions.\nThis challenge features a sequence of turns that the robot must perform in order to get to the ‚Äúend‚Äù of the course. The robot must begin at the starting point and get to the goal area by completing turning and forward movement behaviours. The robot must not cross any lines.\nTask description You will need to complete all the following sections as part of your collaborative presentation:\n1. Traverse course Traverse the course without using any sensors.\nDesign a flowchart for the automated, driverless vehicle to reach the goal. Working code with comments. Validation video. 2. Wall detection with touch sensor Use a touch sensor to detect the boundaries (walls) of the course while moving.\nDesign a flowchart for the automated, driverless vehicle to reach the goal using a touch sensor. Working code with comments. Validation video. 3. Wall detection with ultrasonic sensor Use an ultrasonic sensor to detect the boundaries (walls) of the course while moving.\nDesign a flowchart for the automated, driverless vehicle to reach the goal using an ultrasonic sensor. Working code with comments. Validation video. 4. Connection to our world Discuss the following questions:\nWhat differences were there between the touch and ultrasonic sensors in relation to your code and the driverless vehicle? Explain. How do modern vehicles use these two sensors? To Be Successful Use appropriate protocols when taking photos/videos of others. Acknowledge sources appropriately including source of graphics. Plan and implement consistent and logical navigation. Include hyperlinks to navigate the presentation. Reference sources appropriately. Complete all 3 sections of this task including questions. Work collaboratively with your partner. Learning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in Python coding challenges with persistence and learns from their mistakes and willingly completes the extension activities. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project ","categories":"","description":"","excerpt":"In teams of two, you will design algorithms using flowcharts to create ‚Ä¶","ref":"/8/assessment/vehicles/2-obstacle/","tags":"","title":"2: Obstacle course"},{"body":" Project brief As a mining company, we are seeking a solution for carrying out tasks in hazardous areas of our mines without risking the safety of our workers. We are interested in an autonomous robot that can navigate through confined spaces and avoid obstacles, such as rocks or machinery. It should also have the ability to carry a small camera or mobile phone. Could your team design and program such a robot for us? In teams of two, your task is to design and program an autonomous robot that can explore and navigate its way around a room by avoiding walls and other obstacles before running into them. Your robot must have the capacity to carry a small camera or mobile phone.\nDefining All projects need an introduction that tells the reader what the intended aim of the developed project will be. The problem definition explains the problem/situation and outlines the intended outcomes of the system.\nExplain the task by describing the scenario or setting in which the problem exists. Use the following template to describe the problem to be solved. As a type of user, I want some goal so that some reason. For example: ‚ÄúAs a user with a visual impairment I want to be able to get the news on my smartphone so that I can keep up with my world.‚Äù\nList the design criteria required by the user (AC9TDI8P04) Decomposing How can this problem be broken down into smaller parts so it can be solved? (AC9TDI8P04) Make a list/diagram of the smaller parts that will together solve the problem. Collaborating and managing Project planning is stating how to complete a project within a certain timeframe, usually with defined stages, and with designated resources.\nUsing the example table below to plan and manage the collaborative project. (AC9TDI8P12) Use the feedback notes to record: Problems your team encountered and how your team solved the problems. Steps your team took to produce your final robot (use photos or video). What aspects of your design and program you tested. What adjustments did you make to improve the robot build and program to complete the project What did you learn? Project planning Project Tasks/Stage Responsibilities Timeframes/Schedule Completion Date Tested completed Feedback Notes . . . . . . . . . . Project Collaboration Protocols Discuss how the project content will be shared and what collaboration protocols/rules your team has agreed to.\nWhat digital tools will your team use to collaborate and why? What procedures will be followed to ensure work can continue in the event of a lost laptop or absent team member? -How will you ensure your team‚Äôs work is presented consistently? Designing Before your team creates and develops a robot to achieve the goal(s) described above you need to discuss and document a SPA.\nSense ‚Äî Plan ‚Äî Act SENSE The robot needs the ability to sense important things about its environment, like the presence of obstacles or navigation aids. What data does your robot need about its surroundings, and how will it gather that data? How Will you validate the data collected? (AC9TDI8P01) PLAN The robot needs to take the sensed data and figure out how to respond appropriately to it, based on a pre-existing strategy. What is the robot‚Äôs strategy? How does your program determine the appropriate response, based on that strategy and the sensed data? Draw a flowchart of your plan. (AC9TDI8P05) ACT Finally, the robot must actually act to carry out the actions that the plan calls for. Will the robot design your team is planning to build allow it to sense and act out your plan, physically? What will the robot do? How will it act? Implementing Coding, modifying, debugging and testing During the development and testing of your robot each team member is required to maintain the shared Project Plan. Collaboratively implement your solution to the problem by writing, modifying, debugging and testing your code as a team. (AC9TDI8P09) Your code must include:\nComments to explain sections of code. White space so it can be easily read. Control structures ‚Äì Sequence, selection/branching and Iteration/loops Final Program A print screen or print out of your final program is required with a detailed summary of how the program works. Make sure you have labelled the different sections of your program and have used internal comments. (AC9TDI8P09)\nValidation Video Video your team‚Äôs robot solving the problem.\nEvaluating Evaluation (AC9TDI8P10) In detail, describe the overall success or your robot. These questions will help you:\nCan your robot successfully achieve its primary goal? Has your solution satisfied all the design criteria? Explain. What does it do well? What can be improved? Is it efficient? Discuss the effectiveness of the code. What other areas of society could you robot be used or opportunities for innovation and further development? What future impact could your robot have? Are there any potential risks associated with your robot and what can be done to reduce them? Reflect on your project plan justifying choices made, identifying future improvements to plan and group team and task roles. Presentation Checklist Title slides ‚¨ú Team Members Defining ‚¨ú Describe the problem. ‚¨ú List Design criteria. ‚¨ú Decompose the problem. Collaborating and managing ‚¨ú Plan and Manage evidence with feedback notes. ‚¨ú Project Collaboration Protocols with software used. Designing ‚¨ú Sensors used and how will it act? ‚¨ú Flow Chart Implementing ‚¨ú Final Program/Code with comments ‚¨ú Validation Video Evaluation ‚¨ú Detailed evaluation (answer questions) To Be Successful Your team must complete a working robot and documentation that includes:\nDefining Collaborating and managing Designing Implementing Evaluating Include comments with your all Python code. Use appropriate programming structures (selection and iteration). In detail, you must each complete the documentation in your OneNote.\nPurpose Students apply their coding skills and iterative project techniques to collaboratively identify, deconstruct, design and create an autonomous robot that uses sensors to explore a room.\nLearning Behaviours This task provides the following opportunities to develop and demonstrate the Learner Behaviours:\nDriven Engages in Python coding challenges with persistence and learns from their mistakes and willingly completes the extension activities. Curious Explores and tests ideas by asking questions, researching and through trial and error when learning new skills or developing solutions Collaborative Works in teams to solve problems and create new information. Willingly shares new skills and knowledge and assists others and seeks assistance from peers. Connected Connects programming constructs and data structures to real life applications and is able to explore and discuss issues and ethical implications of their solution Flexible Thinker Applies new knowledge and skills to solve problems and is able to adapt and recognize patterns in other solutions Disciplined Motivated learner who demonstrates initiative by following a project management process to complete a project ","categories":"","description":"","excerpt":" Project brief As a mining company, we are seeking a solution for ‚Ä¶","ref":"/8/assessment/vehicles/3-explorer/","tags":"","title":"3: Robotics explorer"},{"body":"\nAre you a fan of quizzes? Would you like to make one yourself? In this project, you‚Äôll build an animal quiz. Even though the questions are about animals, this project can be easily modified to be about any other topic.\nIn this example, you‚Äôll see bits of code with annotations. The code in black is new code to be added. The code in grey is existing code; use this to work out where to add the new lines of code. The instructions will ask you to run the code at various points. Make sure you do this and that the code successfully runs. Do not proceed to the next step until the previous one works. You‚Äôll just make things harder for yourself!\nWhat happens The program asks the player some questions about animals. They get three chances to answer each question‚Äîyou don‚Äôt want to make the quiz too difficult! Each correct answer will score one point. At the end of the quiz, the program reveals the player‚Äôs final score.\nHow it works This project makes use of a function‚Äîa block of code with a name that performs a specific task. A function lets you use the same code repeatedly, without having to type it all in every time. Python has lots of built-in functions, but it also lets you create functions of your own.\nPutting it together It‚Äôs now time to build your quiz! First you‚Äôll create the questions and the mechanism for checking the answers. Then you‚Äôll add the code that gives the player three attempts to answer each question.\n1. Create A New File Open Mu Editor. Make sure the editor is in the right mode. Click the Mode button in the top left, and choose Python 3. Create a new file, and save it with the name animalQuiz.py in your Digital Tech folder, in a folder named quiz.\n2. Create the score variable Type in the code shown here to create a variable called score and set its starting value to 0.\nscore = 0 3. Introduce the game Next, create a message to introduce the game to the player. This will be the first thing that the player sees on the screen.\nscore = 0 print('Guess the animal') 4. Run the code Now try running the code. Press the Run button from the bar at the top. What happens next? You should see the welcome message in the interactive panel at the bottom of the window. Press the Stop button (where the Run button was) to stop the program and return to editing.\n5. Ask a question (user input) The next line of code asks a question and waits for the player‚Äôs response. The answer (the user input) is saved in the variable guess1. Run the code to make sure the question appears.\nprint('Guess the animal') guess1 = input('Which bear lives at the North Pole? ') 6. Build a check function The next task is to check if the player‚Äôs guess is correct. Type this code at the top of your script, before score = 0. The code creates a function, called check_guess(), that will check if the player‚Äôs guess matches the correct answer. The two words in brackets are parameters‚Äîbits of information the function needs. When you call (run) a function, you assign (give) values, known as arguments, to its parameters.\ndef check_guess(guess, answer): global score if guess == answer: print('Correct answer') score = score + 1 score = 0 7. Call the function Now add a line at the end of the script to call (run) the check_guess() function. This code tells the function to use the player‚Äôs guess as the first parameter and the phrase ‚Äúpolar bear‚Äù as the second parameter.\nguess1 = input('Which bear lives at the North Pole? ') check_guess(guess1, 'polar bear') 8. Test the code Try running the code again and type in the correct answer. The shell window should look like this.\nGuess the Animal! Which bear lives at the North Pole? polar bear Correct answer 9. Add some more questions It takes more than one question to make a quiz! Add two more questions to the program, following the same steps as before. We‚Äôll store the player‚Äôs answers in the variables guess2 and guess3.\nguess1 = input('Which bear lives at the North Pole? ') check_guess(guess1, 'polar bear') guess2 = input('Which is the fastest land animal? ') check_guess(guess1, 'cheetah') guess3 = input('Which is the largest animal? ') check_guess(guess1, 'blue whale') 10. Display the score The next line of code will reveal the player‚Äôs score in a message when the quiz ends. Add it to the bottom of the file, under the last question.\nguess3 = input('Which is the largest animal? ') check_guess(guess1, 'blue whale') print(f'Your score is {str(score)}') 11. Ignore case What happens if the player types ‚ÄúLion‚Äù instead of ‚Äúlion‚Äù? Will they still get a point? No, the code will tell them it‚Äôs the wrong answer! To fix this, you need to make your code smarter. Python has a lower() function, which changes words into all lower-case characters. In your code, replace if guess == answer: with the line shown on the right in bold.\ndef check_guess(guess, answer): global score if guess.lower() == answer.lower(): print('Correct answer') score = score + 1 12. Test the code again Run your code for a third time. Try typing the correct answers using a mixture of capitals and lower-case letters and see what happens.\nGuess the Animal! Which bear lives at the North Pole? polar bear Correct answer Which is the fastest land animal? Cheetah Correct answer Which is the largest animal? BLUE WHALE Correct answer Your score is 3 13. Give the player more chances The player currently has only one chance to get the answer right. You can make it a bit easier for them by giving them three chances to answer a question. Change the check_guess() function to look like this.\ndef check_guess(guess, answer): global score still_guessing = True attempt = 0 while still_guessing and attempt \u003c 3: if guess.lower() == answer.lower(): print('Correct answer') score = score + 1 still_guessing = False else: if attempt \u003c 2: guess = input('Sorry wrong answer. Try again. ') attempt = attempt + 1 if attempt == 3: print(f'The correct answer is \"{answer}\"') score = 0 To know if the player has gotten the right answer, you need to create a variable called still_guessing. You then set the variable to True to show that the right answer hasn‚Äôt been found. It‚Äôs set to False when the player gets the right answer.\n","categories":"","description":"","excerpt":"\nAre you a fan of quizzes? Would you like to make one yourself? In ‚Ä¶","ref":"/8/assessment/games/4-animalquiz/","tags":"","title":"4: Animal quiz"},{"body":"\nAre you a fan of quizzes? Would you like to make one yourself? In this project, you‚Äôll build an animal quiz. Even though the questions are about animals, this project can be easily modified to be about any other topic.\nIn this example, you‚Äôll see bits of code with annotations. The code in black is new code to be added. The code in grey is existing code; use this to work out where to add the new lines of code. The instructions will ask you to run the code at various points. Make sure you do this and that the code successfully runs. Do not proceed to the next step until the previous one works. You‚Äôll just make things harder for yourself!\nWhat happens The program asks the player some questions about animals. They get three chances to answer each question‚Äîyou don‚Äôt want to make the quiz too difficult! Each correct answer will score points. At the end of the quiz, the program reveals the player‚Äôs final score.\nHow it works This project makes use of a function‚Äîa block of code with a name that performs a specific task. A function lets you use the same code repeatedly, without having to type it all in every time. Python has lots of built-in functions, but it also lets you create functions of your own.\n1. Design the main algorithm We know that we are going to build a quiz with lots of questions, but let‚Äôs start small, and worry about just one question, as it seems likely that the other questions we ask will have a lot of code in common. Let‚Äôs start with a basic algorithm.\nYour browser does not support the video tag. Watch video here. We want to ask the user a question, get their guess, and check it against the right answer. If they are correct, we praise them (and we‚Äôll give them a point later). If they get it wrong, we‚Äôll let them try again.\nWe can test out our algorithm by starting at the Start and running our finger along the arrows to check that the behaviour is correct.\n2. Some code Now let‚Äôs turn that into some code.\nYour browser does not support the video tag. Watch video here. We use print() to talk to the user, and input() to get responses back. So far our code doesn‚Äôt loop when the user guesses incorrectly. Let‚Äôs add that now.\n3. Code with retries We can work out where to loop by working out the first and last bits of code that correspond with the parts of the algorithm in the loop, and indent them. We can then write while True: at the start of the loop. We then need to work out which decision should end the loop, and put a break there.\nYour browser does not support the video tag. Watch video here. We can slightly simplify our code here. Because we break out of the loop if the guess is correct, we don‚Äôt need to put the case when the user is wrong inside an else block.\nYour browser does not support the video tag. Watch video here. This works because if you get as far as the new line 7 we know that you guessed wrong (otherwise we‚Äôd have broken out of the loop already). So we don‚Äôt need to check or clarify that.\n5. Multiple questions Let‚Äôs add a couple more questions. We can copy/paste the code we need to make more questions. So what do we need to copy?\nIf you worked out it‚Äôs all of it, you‚Äôre right! We are going to extract this repeated part and make it into a function, so we can write the code once and reuse it multiple times.\nYour browser does not support the video tag. Watch video here. By defining a function to do this work, we can add features or make changes to the function and see those reflected in every question‚Äîmaking those changes for every question by hand would be much more effort, and errors would be much more likely to creep in.\n6. Keeping score To keep track of the score, we will need a variable. For the moment we‚Äôll give one point for a correct answer.\nSince the score will exist across all questions, we need to declare the variable in the main body of the code, and tell the ask() function to use that variable, rather than make up its own when refer to it.\nYour browser does not support the video tag. Watch video here. Here we add a point to the score when we get a question right and print out the current score. Notice the use of f-strings here to print out a variable within other text.\nChallenges Give more points for a correct answer Take away a point for each wrong answer Limit the number of guesses for each question Help: you will need a variable to store the number of guesses remaining. You will need to add another if statement to check the guesses remaining, as it is another way to leave the questions loop (i.e. you might get the answer right, or you might run out of guesses). ","categories":"","description":"","excerpt":"\nAre you a fan of quizzes? Would you like to make one yourself? In ‚Ä¶","ref":"/8/assessment/games/4-animalquiz-new/","tags":"","title":"4: Animal quiz (new)"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/5-checkpoint/","tags":"","title":"5: Game checkpoint"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/6-project/","tags":"","title":"6: Game project"},{"body":" Year 8 Digital Technologies at Thomas More College Assessment Autonomous Vehicles Game Design ","categories":"","description":"","excerpt":" Year 8 Digital Technologies at Thomas More College Assessment ‚Ä¶","ref":"/8/","tags":"","title":"8 Digital Tech"},{"body":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n","categories":"","description":"","excerpt":"When calling a function, the values given to it are called arguments. ‚Ä¶","ref":"/8/glossary/argument/","tags":"","title":"argument"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/","tags":"","title":"Assessment"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/vehicles/","tags":"","title":"Autonomous Vehicles"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsplatform/backgrounds/","tags":"","title":"Backgrounds"},{"body":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nColors are described by the amount of red, green, and blue light to emit, using numbers in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) The built-in RGB LED on your Gemma (a DotStar) has these three color components, so we set its color in this way.\nThe NeoPixel RGB LEDs you will solder onto your Gemma have four components: the usual red, green, and blue and also white. So you if you wanted the above color on your Neopixel LED strip, you would use:\n(0, 150, 255, 0) Unless you want to set a particular LED pixel to be white in color, it is recommended that you set the white value to zero (0), as the white tends to wash out the colors otherwise.\nYou can use the Google Color Picker to find different colors, and then copy the RGB value listed. Don‚Äôt forget to add a value for the white (probably zero) after the other three numbers, if you are setting NeoPixel colors.\n","categories":"","description":"","excerpt":"In almost all programming, American spellings are used. So as ‚Ä¶","ref":"/8/glossary/color/","tags":"","title":"color/colour"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsspace/damage/","tags":"","title":"Damage"},{"body":" Default Move Other Dead ","categories":"","description":"","excerpt":" Default Move Other Dead ","ref":"/8/games/02basics/assetsplatform/enemies/","tags":"","title":"Enemies"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/teachers/flowcharts/","tags":"","title":"Flowcharts"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/assessment/games/","tags":"","title":"Game Design"},{"body":"Importing is the process of adding functions or other objects from other modules to support your program.\nImagine we wish to use the randint() function to choose a random number between 1 and 6, as though we were throwing a single six-sided die. The randint() function is part of the random module. There are two ways we can go:\nimport the whole module import just the objects we need Import module import random num = random.randint(1,6) print(num) We can use a different name for the module in our program, which is useful if the original name is really long, or we happen to have two modules with the same name.\nimport random as ran num = ran.randint(1,6) print(num) Import just what we need By importing just the objects we need from a module, we don‚Äôt need to use the name of the module anymore.\nfrom random import randint num = randint(1,6) print(num) We can rename objects for convenience or to avoid name clashes.\nfrom random import randint as throwDie num = throwDie(1,6) print(num) ","categories":"","description":"","excerpt":"Importing is the process of adding functions or other objects from ‚Ä¶","ref":"/8/glossary/import/","tags":"","title":"import"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsplatform/items/","tags":"","title":"Items"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsspace/lasers/","tags":"","title":"Lasers"},{"body":"A list is a data structure for storing a series of related pieces of information.\nDefining a list You can define a list using square brackets, with the elements separated by commas, like this:\nsquares = [0, 1, 4, 9, 16, 25, 36] vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] Selecting elements You can pick an element from the list like this: squares[0]. Note that counting begins at zero. Think of the number as ‚Äúhow far from the beginning‚Äù the element in the list is. So vowels[0] is the element at the start of the list, and vowels[3] is three elements further down the list. So the string \"u\" in that list would be vowels[4].\nAdding elements You can add elements to the end of a list with the append() function.\nsquares.append(49) print(squares[7]) # Output: 49 Removing elements You can remove elements from a list with remove() and pop().\nfriends = [\"Nhi\", \"David\", \"Hari\", \"Zahra\"] friends.remove(\"David\") print(friends) # Output: [\"Nhi, \"Hari\", \"Zahra\"] If there are multiple elements in the list with the same value, remove() will remove just the first one.\nfriends = [\"Nhi\", \"David\", \"Hari\", \"Zahra\"] exBestie = friends.pop(0) print(friends) # Output: [\"David\", \"Hari\", \"Zahra\"] print(exBestie) # Output: \"Nhi\" ","categories":"","description":"","excerpt":"A list is a data structure for storing a series of related pieces of ‚Ä¶","ref":"/8/glossary/list/","tags":"","title":"list"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsspace/meteors/","tags":"","title":"Meteors"},{"body":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n","categories":"","description":"","excerpt":"When defining a function, the pieces of information that the function ‚Ä¶","ref":"/8/glossary/parameter/","tags":"","title":"parameter"},{"body":" Stand Front Walk1 Walk2 Swim1 Swim2 Climb1 Climb2 Hit Duck Jump ","categories":"","description":"","excerpt":" Stand Front Walk1 Walk2 Swim1 Swim2 Climb1 Climb2 Hit Duck Jump ","ref":"/8/games/02basics/assetsplatform/players/","tags":"","title":"Players"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsspace/powerups/","tags":"","title":"Power-ups"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/search/","tags":"","title":"Search Results"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsspace/ships/","tags":"","title":"Ships"},{"body":" Digital Audio Interface Sounds UI Audio Sci-Fi Sounds ","categories":"","description":"","excerpt":" Digital Audio Interface Sounds UI Audio Sci-Fi Sounds ","ref":"/8/games/02basics/assetsplatform/sounds/","tags":"","title":"Sounds"},{"body":"","categories":"","description":"","excerpt":"","ref":"/8/teachers/","tags":"","title":"Teachers"},{"body":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but when programming Gemma we mostly use them for colors (red, green, blue, white).\n","categories":"","description":"","excerpt":"A tuple is a single unit of data made up of multiple values. In Python ‚Ä¶","ref":"/8/glossary/tuple/","tags":"","title":"tuple"},{"body":"Computers store all information as sequences of numbers, but different kinds of data are encoded in different ways. For example, whole numbers and decimal numbers are stored differently.\nSome common data types you‚Äôll encounter are:\nintegers (int) Integers are whole numbers, and can be positive or negative. floating point numbers (float and double) Floating point numbers (commonly called floats) are for storing decimal numbers. The number is stored in scientific notation, with a mantissa and exponent. $$ \\overbrace{3.18}^{\\text{mantissa}}\\times 10^{\\overbrace{-7}^{\\text{exponent}}} $$\nThere is a limited number of digits for the mantissa and the exponent. If you need more, a double precision floating point number (or double for short) has twice the space, so can store a more precise mantissa, and a larger exponent.\ncharacters (char) A character is a single letter, digit, punctuation mark, or piece of whitespace (a space, newline, tab, etc.). strings (string) Strings are so called because they are ‚Äòstrings of characters‚Äô. They are usually indicated with double quotes ‚Äúlike this‚Äù. In some languages, like Python, strings can be in single quotes as well, ‚Äôlike this‚Äô. ","categories":"","description":"","excerpt":"Computers store all information as sequences of numbers, but different ‚Ä¶","ref":"/8/glossary/type/","tags":"","title":"type"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/8/games/02basics/assetsspace/ui/","tags":"","title":"UI"},{"body":"Full article\nUser stories are a way of describing the requirements of a project that focuses on the users, rather than the designers, of a system. User stories take the form:\nAs a ____, I want to ____ so that ____.\n","categories":"","description":"","excerpt":"Full article\nUser stories are a way of describing the requirements of ‚Ä¶","ref":"/8/teachers/userstories/","tags":"","title":"User stories"},{"body":"A variable is a named place to store a piece of information.\n","categories":"","description":"","excerpt":"A variable is a named place to store a piece of information.\n","ref":"/8/glossary/variable/","tags":"","title":"variable"},{"body":"We will be making autonomous vehicles using LEGO‚Äôs EV3 platform. An autonomous vehicle is one which has no intervention at all from a human while it is running.\n","categories":"","description":"","excerpt":"We will be making autonomous vehicles using LEGO‚Äôs EV3 platform. An ‚Ä¶","ref":"/8/vehicles/","tags":"","title":"Autonomous Vehicles"}]